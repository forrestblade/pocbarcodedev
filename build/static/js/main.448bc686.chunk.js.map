{"version":3,"sources":["components/header/index.js","components/barcodePicker/index.js","services/mock/mockD110.js","components/main/index.js","services/fetchEquipment.js","components/footer/index.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","configure","catch","error","alert","style","position","top","bottom","left","right","margin","maxWidth","maxHeight","BarcodePicker","props","ref","React","createRef","ScanditSDKBarcodePicker","create","this","current","then","barcodePicker","onScan","on","onError","destroy","prevProps","JSON","stringify","scanSettings","applyScanSettings","visible","setVisible","Component","lawnTractor","listPrice","daysInInventory","stockNumber","serialNumber","vehicleNumber","meterR","Main","useState","scan","showScan","scanBarcode","Fragment","playSoundOnScan","vibrateOnScan","ScanSettings","enabledSymbologies","codeDuplicateFilter","scanResult","fetch","res","data","console","log","document","getElementById","innerHTML","barcodes","reduce","string","barcode","Barcode","Symbology","toHumanizedName","symbology","message","id","placeholder","type","onClick","Footer","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.448bc686.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n  return (\n      <nav>\n        <span></span>\n        <span>Equipment</span>\n        <span className=\"grid\"></span>\n      </nav>\n  )\n}\n\nexport default Header","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { configure, BarcodePicker as ScanditSDKBarcodePicker } from \"scandit-sdk\";\n\n// Configure the library and activate it with a license key\nconfigure(\"ASld8RA1DjTYEzgsggQvaCUMxci2CkamYwJAGIB1nfsiJPvuFEQbm9ZWy9E6fpdljl+wwMJ2tipje+9/UUjhKxIh/yQbb8xDNmhqvZVnAtuBFtP5P1gyu3V3UlqjUaUbyg+K85AHsN7jQ+NzSEZtyWHXYkbhgHf6qjw+B8cxA+CbumlveCbus8oXYM9Y9H0BGnLPWvt1OqaDZa9zZVdxE0deTeJCwsJoOHqfQJhYXzdHJ3mU4ajkqgha9ccD8cevY4lPGDhkSNyAKwQ0PAp00CEwDB9whxM/FOFgNDFOLQFbhu8w6jM/bidC7pUuS9zQZk/dgywplR22AS0gLc4+L4DDgQdKs/hhrblPSyrvtl+jRQ8H/EdgHcQm/lRUwcFwc1nrXgQ9Op4EFr5e1Tv7xowTfxipw9ubltG0kM0SKUdegqkkS61X9mk1djmiOcv9AIaRDd+4KV+3wo1tGCdrdWR3prXciFKlcGXX0gkv9Iu6IuJr0ArCEIwE+jDLkRM6tKz5mGTyyXGAoqGMF9rfJVx/hK98ccG0YMLV0T0ERtvOy8bVteBf7s78ZBc0pAIAFSaFAIqjN7HE38jxu6tGfICRpKV5VLbO7yenwpi6TAIYqYFbrxFQbxoX1naxw2NN+8+XYeny78KfcLl8hzJEwNBubLlRQ2X6u91KmPA7q7gtoHs4Vzh02lrkuwxIL0DMgjeh8vJu+/4ukGSl7xnbVs8VFB2e/88MDW4BZKAyhEBygBMc4aPNUwIpUuAaEqYtKNvaRELd2MgIZ3V9F/baXTnhxPhL8m/YhqSJbkE1ndM6RvLV6yMcgN59QQ==\").catch(error => {\n  alert(error);\n});\n\nconst style = {\n  position: \"absolute\",\n  top: \"0\",\n  bottom: \"0\",\n  left: \"0\",\n  right: \"0\",\n  margin: \"auto\",\n  maxWidth: \"1280px\",\n  maxHeight: \"80%\"\n};\n\nclass BarcodePicker extends Component {\n  static propTypes = {\n    visible: PropTypes.bool,\n    playSoundOnScan: PropTypes.bool,\n    vibrateOnScan: PropTypes.bool,\n    scanningPaused: PropTypes.bool,\n    guiStyle: PropTypes.string,\n    videoFit: PropTypes.string,\n    scanSettings: PropTypes.object,\n    enableCameraSwitcher: PropTypes.bool,\n    enableTorchToggle: PropTypes.bool,\n    enableTapToFocus: PropTypes.bool,\n    enablePinchToZoom: PropTypes.bool,\n    accessCamera: PropTypes.bool,\n    camera: PropTypes.object,\n    cameraSettings: PropTypes.object,\n    targetScanningFPS: PropTypes.number,\n    onScan: PropTypes.func,\n    onError: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  componentDidMount() {\n    ScanditSDKBarcodePicker.create(this.ref.current, this.props).then(barcodePicker => {\n      this.barcodePicker = barcodePicker;\n      if (this.props.onScan != null) {\n        barcodePicker.on(\"scan\", this.props.onScan);\n      }\n      if (this.props.onError != null) {\n        barcodePicker.on(\"scanError\", this.props.onError);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.barcodePicker != null) {\n      this.barcodePicker.destroy();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // These are just some examples of how to react to some possible property changes\n\n    if (JSON.stringify(prevProps.scanSettings) !== JSON.stringify(this.props.scanSettings)) {\n      this.barcodePicker.applyScanSettings(this.props.scanSettings);\n    }\n\n    if (prevProps.visible !== this.props.visible) {\n      this.barcodePicker.setVisible(this.props.visible);\n    }\n  }\n\n  render() {\n    return <div ref={this.ref} style={style} />;\n  }\n}\n\nexport default BarcodePicker;\n","export const lawnTractor = {\n  listPrice: 2472.00,\n  daysInInventory: 32,\n  stockNumber: 125549,\n  serialNumber: '1GXD110EKFF625130',\n  vehicleNumber: 1000003789,\n  meterR: 29\n}\n","import React, { useState } from 'react'\nimport { ScanSettings, Barcode } from \"scandit-sdk\";\nimport BarcodePicker from '../barcodePicker'\nimport { fetchEquipment } from '../../services/fetchEquipment';\n\nconst Main = (props) => {\n\n  const [scan, showScan] = useState(false)\n\n  function scanBarcode() {\n    showScan(!scan)\n  }\n  return (\n    <React.Fragment>\n      {scan ?\n        <main className='scandit'>\n          <BarcodePicker\n            playSoundOnScan={true}\n            vibrateOnScan={true}\n            scanSettings={\n              new ScanSettings({\n                enabledSymbologies: [\"qr\", \"ean8\", \"ean13\", \"upca\", \"upce\", \"code128\", \"code39\", \"code93\", \"itf\", \"pdf417\"],\n                codeDuplicateFilter: 1000\n              })\n            }\n            onScan={scanResult => {\n              scanBarcode()\n              fetchEquipment()\n              document.getElementById(\"scandit-barcode-result\").innerHTML = \n              scanResult.barcodes.reduce(function (string,barcode) {\n                console.log(string, 'string')\n                console.log(barcode, 'barcode')\n                return string + Barcode.Symbology.toHumanizedName(barcode.symbology) + \": \" + barcode.data + \"<br>\";\n              },\n                \"\");\n            }}\n            onError={error => {\n              console.error(error.message);\n            }}\n          />\n        </main> :\n        <main>\n          <div id=\"scandit-barcode-result\" className=\"result-text\"></div>\n          <div className='search'>\n            <input placeholder='Search by Stock #, Serial # or Model' type='text' />\n            <h2><span>Or</span></h2>\n            <button className='scan-serial'>Scan Serial or Stock</button>\n            <h2><span>Or</span></h2>\n            <button onClick={() => scanBarcode()} className='scan-code'>Scan Barcode</button>\n          </div>\n        </main>\n      }\n    </React.Fragment>\n  )\n}\n\nexport default Main","import {lawnTractor} from './mock/mockD110'\n\nexport const fetchEquipment = () => {\n  return fetch(lawnTractor)\n    .then(res => JSON.stringify(res))\n    .then(data => console.log(data))\n}","import React from 'react'\n\nconst Footer = () => {\n  return (\n    <section>\n    <span>\n      Equipment\n    </span>\n    <span>\n      Customers\n    </span>\n    <span>\n      Quote\n    </span>\n  </section>\n  )\n}\n\nexport default Footer","import React from 'react';\nimport './App.css';\nimport Header from './header';\nimport Main from './main';\nimport Footer from './footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}